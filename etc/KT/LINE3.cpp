/**
 * 문제 설명
과학자들은 황폐해져 가는 지구를 대체할 수 있는 행성을 찾기 위해 우주선들을 발사하려 합니다.
우주선 n개에 1부터 n까지 번호가 붙어있으며, 각기 다른 행성이 목적지로 정해져 있습니다.

우주선들을 발사하기 위해서는 먼저 각 우주선에 연료를 채워 넣어야 합니다.
과학자들은 연료 fuel배럴을 모든 우주선에 적절하게 배분하려 합니다.
단, 각 우주선에 배분하는 연료의 양은 양의 정수여야 합니다.

엔진의 힘이 p인 우주선에 연료를 m배럴 채운 후, 우주선을 발사한다면 우주선의 엔진이 m초 동안 작동합니다. 이때 우주선은 속도가 1초 동안 pkm/s씩 일정하게 증가하는 등가속도 운동을 합니다.
우주선이 발사된 지 m초가 지나면 엔진의 작동이 멈춘 후, 우주선은 같은 속도를 유지하는 등속도 운동을 합니다.

예를 들어, 우주선 A의 목적지 행성이 지구로부터 750km 떨어져 있고 로켓의 힘이 20이라고 가정합니다.
우주선 A에 연료를 5배럴 채워 발사하면 5초 동안 우주선의 속도는 초당 20km/s 씩 일정하게 증가해 100km/s가 되고, 그 후 우주선 A의 속도는 100km/s를 유지합니다.
우주선 A를 발사한 지 5초가 지난 시점에 A는 지구로부터 250km 떨어진 지점에 있게 됩니다. 발사한 지 10초가 지난 시점에는 지구로부터 750km 떨어진 지점에 있게 되어 목적지 행성에 도착하게 됩니다.
아래 그래프는 우주선 A에 연료를 5배럴 채워 발사한 경우의 속도-시간 그래프입니다.

vt3EN.png

거리 = 속도 × 시간이라는 개념을 이용해 속도-시간 그래프의 밑넓이를 구하면 우주선의 이동거리를 구할 수 있습니다.
위 속도-시간 그래프에서 0~5초까지의 밑넓이는 100km/s × 5s ÷ 2 = 250km이고, 5~10초까지의 밑넓이는 100km/s × (10-5) s = 500km 이므로 우주선 A의 0~5초 동안의 이동거리는 250km, 5~10초 동안의 이동거리는 500km임을 구할 수 있습니다.

n개의 우주선을 동시에 발사하면, 특정 정수 초가 지난 뒤에는 모든 우주선이 목적지에 도착하게 됩니다. 이때 연료를 적절히 배분해 모든 우주선이 목적지에 도착하는 정수 초를 최소화하려고 합니다.

다음은 우주선의 정보가 아래 표와 같을 때 8배럴의 연료를 배분하는 예시입니다.

우주선	엔진의 힘	목적지 행성의 거리(km)
1	20	750
2	30	675
1번 우주선에 4배럴, 2번 우주선에 4배럴 배분했을 때 각 우주선이 목적지 행성에 도착하는 시각은 아래 표와 같습니다.

우주선	도착시각(초)
1	11.375
2	7.625
모든 우주선이 목적지에 도착하는 정수 초는 12초입니다.
1번 우주선에 5배럴, 2번 우주선에 3배럴 배분했을 때 각 우주선이 목적지 행성에 도착하는 시각은 아래 표와 같습니다.

우주선	도착시각(초)
1	10
2	9
모든 우주선이 목적지에 도착하는 정수 초는 10초이며, 이보다 빠른 정수 초에 모든 우주선이 목적지에 도착하도록 하는 연료 배분 방법은 없습니다.
총 연료량을 나타내는 정수 fuel, 각 우주선들의 로켓의 힘이 담긴 정수 배열 powers, 각 우주선들의 목적지 행성까지의 거리가 담긴 정수 배열 distances가 매개변수로 주어집니다. 이때, 모든 우주선이 목적지에 도착하는 정수 초의 최솟값을 return 하도록 solution 함수를 완성해주세요.

제한사항
1 ≤ powers의 길이 = distances의 길이≤ 10,000
powers의 길이 ≤ fuel ≤ 1,000,000
powers의 i번째 원소는 i번째 우주선 엔진의 힘을 나타냅니다.
1 ≤ powers의 원소 ≤ 1,000
distances의 i번째 원소는 i번째 우주선의 목적지 행성까지의 거리를 나타냅니다.
1 ≤ distances의 원소 ≤ 1,000,000
입출력 예
fuel	powers	distances	result
8	[20, 30]	[750, 675]	10
19	[40, 30, 20, 10]	[1000, 2000, 3000, 4000]	40
100	[100, 150]	[1, 1000000]	117
5	[1, 2, 3, 4, 5]	[50, 40, 30, 20, 10]	51
입출력 예 설명
입출력 예 #1

문제 예시와 같습니다.

입출력 예 #2

1번 우주선에 1배럴, 2번 우주선에 2배럴, 3번 우주선에 4배럴, 4번 우주선에 12배럴 배분했을 때 각 우주선이 목적지 행성에 도착하는 시각은 아래 표와 같습니다.

우주선	도착시각(초)
1	25.5
2	34.3333...
3	39.5
4	39.3333...
이때 모든 우주선이 목적지에 도착하는 정수 초는 40초이며, 이보다 빠른 정수 초에 모든 우주선이 목적지에 도착하도록 하는 연료 배분 방법은 없습니다.

따라서 40을 return 해야 합니다.

입출력 예 #3

1번 우주선에 연료를 얼마나 배분하든 1번 우주선은 항상 1초 안에 목적지 행성에 도착할 수 있습니다. 따라서 1번 우주선에 1배럴, 2번 우주선에 나머지 99배럴을 모두 배분해야 합니다. 이때 2번 우주선은 약 116.84초에 목적지 행성에 도착합니다.

따라서 117을 return 해야 합니다.

입출력 예 #4

fuel이 5, 우주선의 수가 5이므로 반드시 각 우주선에 1배럴씩 연료를 배분해야 합니다. 이때 50.5초가 지나면 모든 우주선이 목적지에 도착하게 됩니다.

따라서 51을 return 해야 합니다.
 */

#include <string>
#include <vector>

using namespace std;

int solution(int fuel, vector<int> powers, vector<int> distances) {
    int answer = 0;
    int left=1, right=1'000'000;
    while(left<=right){
        int mid=(left+right)/2, sum=0;
        int flag=1;
        for(int i=0;i<powers.size();i++){
            int flag2=0;
            for(int k=1;k<fuel&& sum<=fuel;k++){
                if(mid<k){
                    if((k*k*powers[i]/2)<distances[i])continue;
                    else {
                        sum+=k;
                        flag2=1;
                        if(sum>fuel)flag=0;
                        break;
                    }
                }
                else{
                    if((k*k*powers[i]/2)+(k*powers[i]*(mid-k))<distances[i])continue;
                    else{
                        sum+=k;
                        flag2=1;
                        if(sum>fuel)flag=0;
                        break;
                    }
                }
            }
            if(!flag2)flag=0;
            if(!flag)break;
        }
        if(!flag)left=mid+1;
        else {
            answer=mid;
            right=mid-1;
        }
    }
    return answer;
}